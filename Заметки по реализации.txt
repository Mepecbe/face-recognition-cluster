============== ПО РЕАЛИЗАЦИИ ==============
	Есть главный сервер, на нём запущен сервер API и сервер для обработки информации от воркеров
	Главный сервер так же хранит информацию о людях (идентификатор человека - информация о нём)

	Воркер - сервер занимающийся поиском лица
		Поиск осуществляется среди директорий
		Каждая директория содержит фото одного человека
		Наименование директории - идентификатор человека

	За 1 ошибку целостности принимается 1 папка, если в папке имеется хоть 1 файл с ошибкой - ошибка засчитывается

======================================================== Описание API ========================================================

WorkerServer - сервер, занимающийся поиском лиц
	/taskResult GET - результат проверки файла скриптом
		id: string
		action: "start" | "error" | "result"
		если action это "result"
			то должно быть свойство "status"

	/getTasksCount GET - получить количество задач в очереди
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		number - количество задач

	/getDirList GET - получить список папок
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		string - пример qwe,rtre,bbr (значения разделенные запятой)

	/uploadCheckFile POST - выгрузить файл на проверку
		filedata - фото
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		string - идентификатор файла, по которому можно запустить проверку

	/createTask GET - добавить задачу по поиску
		fileid: string - идентификатор файла(ранее загруженного через метод uploadCheckFile)
		directory: string - Проверяемая директория
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		taskId: string - идентификатор созданной задачи
	
	/checkDir GET - проверить существование директории с фотографиями
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		number - количество файлов в папке, код 200
		код 404 - папки не существует

	/checkPhoto GET - проверить существование фотографии
		dirname: string - наименование папки, в которой должна находится фотография
		photo: string - наименование фото(вместе с расширением)
		checksumm: 1 or 0 - получить контрольную сумму в случае успеха
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		КОД 200 - number - 1 (если опция checksumm это 1 то будет возвращена контрольная сумма файла)
		КОД 404 - empty - файл не существует

	/createDir GET - создать директорию в папке, в которой хранятся фотографии(а точнее в папке, где находятся папки с фотографиями)
		dirName: string - наименование директории

	/addFile POST - добавить фото в папку
		dir: string - наименование папки в которую поместить фотографию
		filedata - фотография

	/removeDir GET - удалить директорию (ПУСТОЙ АРГУМЕНТ обозначает удаление всей папки с фотографиями)
		dirname: string - наименование директории




========================== ГЛАВНЫЙ СЕРВЕР ======================

MainWorkerServer - сервер, принимающий сообщения от воркеров, является главным (управляющим)
	/ GET - для проверки доступности и пинга

	/taskResult GET
		taskId: string - идентификатор задачи, результат по которой пришёл
		found: 1 or 0  - обнаружено(1) ли совпадение
		faceId?: string - идентификатор найденного совпадения(наименование директории, в которой находятся лица)

	/addServer GET - добавить сервер(при этом в хранилище главного сервера будет добавлена запись о этом сервере(его айпи, порт, и прочая информация))
		ip: string - айпи сервера(или адрес)
		dirs: number - количество папок с фотографиями на сервере
		port: number - порт воркера
		cpuCount: number - количество ядер на сервере


API Server - сервер, позволяющий использовать все возможности сети
	========== РАСПРЕДЕЛЕНИЕ ==========
		/distribution/dirsCount GET - количество директорий с фотографиями
		ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
			number

		/distribution/count GET - узнать количество распределенных или не распределенных директорий
			distributed: 1 или 0 --- 1 - количество распределенных, 0 - количество не распределенных
		ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
			number

		/distribution/checkDistribution GET - проверить распределение на серверах (обычная сверка списка не распределённых директорий со списком директорий на серверах)

		/distribution/checkNetworkIntegrity GET - проверить целостность сети (проверка существования директорий на удалённых серверах)(проверка правильности данных в базе распределённых папок)
			fixErrors: 1 or 0 - исправлять ли ошибки целостности сети
			fullCheck: 1 or 0 - производить ли проверку каждого файла

		/distribution/startAutoDistrib GET - запустить автоматическое распределение
		
		/distribution/loadDirs GET - запустить загрузку директорий

		/distribution/getServersList GET - запросить список идентификаторов серверов, которые в данный момент участвуют в распределении
		ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
			string - идентификатор сервера (если их несколько, то они будут разделены запятой)

		/distribution/updateServerList GET - обновить список доступных для распределения серверов
		ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
			number - количество серверов

		/distribution/runReDistribution GET - провести полное перераспределение, суть этой операции в том, что на всех серверах удаляются папки а затем запускается авто распределение

	========== СЕРВЕРНЫЕ УТИЛИТЫ ==========

	/serversList GET - запрос списка серверов главного воркера
		online: 1 - если существует параметр online и он равен 1, то будет возвращён тольк список активных серверов 
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		{
			id: string,
			url: string,
			port: number,
			cpu_count: number,
			dirsCount: number
		}[]

	/getLag GET - узнать задержку цикла выполнения
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		number


	========= ОСНОВНЫЕ МЕТОДЫ =========
	
	/createTask POST - создать задачу по поиску лица
		filedata - файл фотографии
	ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
		string - идентификатор задачи


============= ЗАМЕЧАНИЯ ===========
	При работе распределителя сервер может существенно подвисать, необходимо проверить возможность переписывания распределителя
		на язык C#

	CRITICAL: Ошибки главного сервера (передача файла) при наличии пробелов в именовании файла
	CRITICAL: Отсутствие безопасности
	CRITICAL: Пустые файлы сервер воспринимает как нарушение целостности! Пустые файлы необходимо удалять

	Необходимо добавить сбор различной статистики

	
	
	задача по поиску лица на удалённых серверах идентифицируется следующим образом
	|идентификатор задачи по поиску лица|проверяемая директория|
	123e4567-e89b-12d3-a456-426655440000-123123321

	Идеи на будущие улучшения:
		=============== КЛАСТЕРНЫЕ СЕТИ =================
		Добавить алгоритм, позволяющий объединять несколько машин в один кластер
		При этом, что бы в системе кластер распознавался как одна машина
		Например

				=======главный сервер=======
					/            	 	\
				   /		       	  	 \
				=Сервер 1(кластер)=       \
				=16+4 ядра        =	  	   \
				/				  	  		\
			==Сервер 1.1=		   	   		 \
			= 4 ядра			    		  \
										Сервер 2 (4 ядра)

		На этом примере Сервер 2 является отдельным
		Сервер 1.1 подключён к серверу 1, таким образом они объеденены в кластерную сеть
		Сервер 1 имеет 16ти ядерный процессор, но главный сервер видит его как 20-ти ядерный, так как сервер 1.1
			входит в состав сервера 1

		Сервер, к которому подключены другие сервера называется главным сервером кластерной сети(в данном случае это Сервер1)

		Таким образом, если к одному серверу распознавания лиц(не управляющему) подключено несколько серверов, то это называется кластерной сетью
		К главному (управляющему) серверу подключается только главный сервер кластерной сети

		В состав главного кластерного сервера включается планировщик, который распределяет и балансирует нагрузку между серверами в кластерной сети

		=============== БАЛАНСИРОВКА, ПРИОРЕТИЗАЦИЯ ЗАДАЧ В СЕТИ =============
		Предположим у нас есть следующая кластерная сеть
			Главный сервер (управляющий)
				-Сервер 1 (главный кластерный сервер)
					-Сервер 1.1 папки с фотографиями [1, 2, 3, 4, 5]
					-Сервер 1.2 папки с фотографиями [6, 7, 8, 9, 10]
					-Сервер 1.3 папки с фотографиями [11, 12, 13, 14, 15]
				-Сервер 2 (главный кластерный сервер)
					-Сервер 2.1 папки с фотографиями [100, 101, 102, 103, 104]
					-Сервер 2.2	папки с фотографиями [105, 106, 107, 108, 109]
					-Сервер 2.3 папки с фотографиями [110, 111, 112, 113, 114]

		!Основная проблема и теория: 
			Изначально было предположено, что главный сервер распределяет базу фотографий между всеми подключенными серверами и кластерными сетями
			Основная идея балансировки состоит в том, что бы перемещать сервера из одной кластерной сети в другую
			И тут кроется ньюанс - базы фотографий заранее распределены между серверами, перемещение из одной сети в другую потребует так же перемещения и перераспределения баз фотографий
			Допустим мы хотим переместить сервер 1.3 из в кластерную сеть 2, тогда необходимо будет перераспределить данные в сети 1 с исключенным сервером 1.3
			Затем необходимо произвести перенос сервера в сеть 2, и там снова произвести перераспределение данных

			В условиях большого объёма данных и большой удалённости серверов друг от друга это может создать некоторые издержки
			Частично эту проблему решит дублирование одних данных сразу на нескольких серверах